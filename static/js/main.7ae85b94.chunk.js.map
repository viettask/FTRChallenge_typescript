{"version":3,"sources":["components/Secondtimer.tsx","components/Nextnumber.tsx","components/Menu.tsx","components/Output.tsx","components/App.tsx","index.tsx"],"names":["handleChange","num","parseInt","document","getElementById","value","trim","isNaN","innerHTML","sessionStorage","setItem","toString","disabled","Secondtimer","className","type","placeholder","name","id","onClick","checkFib","firstNum","secondNum","thirdNum","handleClick","numArr","getItem","push","JSON","stringify","str","tempList","parse","flat","Nextnumber","Menu","interval","freNum","status","handleInterval","setInterval","coreNum","arr","filter","item","index","indexOf","coreNumCount","Array","length","fill","i","j","objNumList","m","sort","a","b","console","log","map","obj","key","clearInterval","removeItem","sm","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.7ae85b94.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n /* This function to store value of time (in seconds) into SessionStorage\r\n Besides, it also check if the value is a number*/\r\nconst handleChange = () : void => { \r\n    const num : number = parseInt((document.getElementById(\"timing\") as HTMLInputElement).value.trim()) ;\r\n    if(!isNaN(num)){\r\n        sessionStorage.setItem('frequency', num.toString());\r\n        (document.getElementById(\"freBtn\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"numberentered\") as HTMLInputElement).innerHTML = \"<p>The frequency entered is \"+num+\" (in seconds) </p>\";\r\n        (document.getElementById(\"timing\")as HTMLInputElement ).disabled = true;\r\n        (document.getElementById(\"timing\") as HTMLInputElement).value = num.toString();\r\n        (document.getElementById(\"notification_timer\") as HTMLInputElement).innerHTML = \"<span class='welcome'> Done! Thanks</span>\";\r\n    }\r\n    else\r\n    {\r\n        (document.getElementById(\"timing\") as HTMLInputElement).value = \"\";\r\n        (document.getElementById(\"notification_timer\") as HTMLInputElement).innerHTML = \"<span class='warning'>The frequency value must be a number. Please enter again!</span>\";\r\n    }\r\n };\r\n\r\n /* Components for adding the amount of time\r\n including 1 input field, 1 button and 1 notification label*/\r\nexport default function Secondtimer() {\r\n    return (\r\n        <div className=\"\">\r\n                    <input type=\"text\" placeholder=\"\" name=\"\" id=\"timing\" className=\"input\" />\r\n                    <button id=\"freBtn\" className=\"enterBtn button\" onClick={handleChange}> Confirm</button>\r\n                    <p>(in seconds)</p>\r\n                    <p id=\"notification_timer\">\r\n                    <span className=\"welcome\">Please input the amount of time between emitting numbers and their frequency</span>\r\n                    </p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n /* This function to check if value is a Fibonacci number (return true)\r\n */\r\nfunction checkFib(num : number) :boolean\r\n{\r\n    let firstNum :number = 0;\r\n    let secondNum :number= 1;\r\n    if (num===firstNum || num===secondNum) return true;\r\n    let thirdNum : number = firstNum + secondNum;\r\n    while(thirdNum<=num)\r\n    {\r\n        if(thirdNum === num) return true;\r\n        firstNum = secondNum;\r\n        secondNum = thirdNum;\r\n        thirdNum = firstNum + secondNum;\r\n    }\r\n    return false;\r\n}\r\n\r\n /* This function to store all the numbers entered by users into SessionStorage\r\n Besides, it also check if the value is a number*/\r\nconst handleClick = () :void => {\r\n   const num : number = parseInt((document.getElementById(\"numberadded\") as HTMLInputElement).value.trim());\r\n   let numArr : string [] = [];\r\n \r\n   if((sessionStorage.getItem(\"frequency\") === null))  \r\n   {\r\n       (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='warning'>Please enter the frequency value first</span>\";\r\n   }\r\n   else{\r\n        if ((sessionStorage.getItem(\"numberList\") === null)) {\r\n            if (!isNaN(num))\r\n            {   \r\n                let numArr : string [] = [];\r\n                numArr.push(num.toString());\r\n                sessionStorage.setItem('numberList', JSON.stringify(numArr));\r\n                let str = checkFib(num)?\"<p> The first number is \" + num+\" - <b>FIB</b> </p>\":\"<p> The first number is \" + num+\"</p>\";\r\n                (document.getElementById(\"numberentered\") as HTMLInputElement).innerHTML += str;\r\n                (document.getElementById(\"numberadded\") as HTMLInputElement).value = \"\";\r\n                (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='welcome'>Please enter the next number</span>\";\r\n            }\r\n            else {\r\n                (document.getElementById(\"numberadded\")as HTMLInputElement).value = \"\";\r\n                (document.getElementById(\"notification_num\")as HTMLInputElement).innerHTML = \"<span class='warning'>The value must be a number. Please enter again!</span>\";\r\n            }\r\n        }\r\n        else {\r\n            if (!isNaN(num)) {\r\n                numArr = [];\r\n                let tempList : string  = sessionStorage.getItem(\"numberList\") as string;\r\n                numArr.push(...JSON.parse(tempList));\r\n                numArr.flat();\r\n                numArr.push(num.toString());\r\n                sessionStorage.setItem('numberList', JSON.stringify(numArr));\r\n                let str = checkFib(num)?\"<p> The next number is \" + num+\" - <b>FIB</b> </p>\":\"<p> The first number is \" + num+\"</p>\";\r\n                (document.getElementById(\"numberentered\") as HTMLInputElement).innerHTML += str;\r\n                (document.getElementById(\"numberadded\") as HTMLInputElement).value = \"\";\r\n                (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='welcome'>Please enter the next number</span>\";\r\n            }\r\n            else {\r\n                (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='warning'>The value must be a number. Please enter again!</span>\";\r\n            }\r\n        }\r\n   }\r\n\r\n};\r\n\r\n /* Components for entering the series of numbers\r\n including 1 input field, 1 button and 1 notification label*/\r\nexport default function Nextnumber() {\r\n    return (\r\n        <div className=\"\">\r\n        <input type=\"text\" placeholder=\"\" name=\"\" id=\"numberadded\" className=\"input\"/>\r\n        <button  className=\"enterBtn button\" onClick={handleClick}>Confirm</button>\r\n            <p>\r\n            </p>\r\n            <p id=\"notification_num\">\r\n               <span className=\"welcome\">Please enter the first number</span>\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n /* Function to store all the numbers entered by users into SessionStorage\r\n Besides, it also check if the value is a number*/\r\nfunction removeDuplicates(arr : string []) {\r\n    return arr.filter((item,\r\n        index) => arr.indexOf(item) === index);\r\n}\r\n\r\n\r\nexport default function Menu() {\r\n   // const [program, setProgram] = useState(\"quit\");\r\n    let status=\"quit\";\r\n    let interval : any;\r\n    let numArr :any [] = [];\r\n    let freNum : number | null;\r\n\r\n     /* This function applied when users click the Quit button\r\n     to clear all values stored in SessionStorage and remove the Interval\r\n     and return the farewell message to users*/\r\n    const handleQuit = () => {\r\n        (document.getElementById(\"freBtn\")  as HTMLInputElement).disabled = false;\r\n        (document.getElementById(\"quitBtn\") as HTMLInputElement).disabled = true;\r\n        sessionStorage.removeItem('frequency');\r\n        sessionStorage.removeItem('numberList');\r\n        (document.getElementById(\"timing\") as HTMLInputElement).disabled = false;\r\n        status=\"quit\";\r\n        (document.getElementById(\"numberentered\") as HTMLInputElement).innerHTML = \"<p>Please enter the field required above</p>\";\r\n        (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<p>Thanks for playing</p>\";\r\n        (document.getElementById(\"startBtn\") as HTMLInputElement).disabled = false;\r\n        (document.getElementById(\"timing\") as HTMLInputElement).value = \"\";\r\n        clearInterval(interval);\r\n        (document.getElementById(\"notification_timer\") as HTMLInputElement).innerHTML = \"<span class='welcome'>Please input the amount of time between emitting numbers and their frequency</span>\";\r\n        (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='welcome'>Please enter the first number</span>\";\r\n    }\r\n\r\n     /* This function applied when the users click the Start button\r\n     to print out the series of numbers in descending order and their frequency exactly like the formating required\r\n     It will be stopped when the users click the Halt button or the Stop button*/\r\n    const handleStart = () => {\r\n        if(\"frequency\" in sessionStorage &&  \"numberList\" in sessionStorage)\r\n        {\r\n            status=\"start\";\r\n            (document.getElementById(\"quitBtn\") as HTMLInputElement).disabled = false;\r\n            (document.getElementById(\"startBtn\") as HTMLInputElement).disabled = true;\r\n            (document.getElementById(\"timing\") as HTMLInputElement).disabled = false;\r\n            (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML = \"<p>The system has started</p> <p>\";\r\n            handleInterval();\r\n        }\r\n        else{\r\n            if ((document.getElementById(\"timing\") as HTMLInputElement).disabled == false)\r\n            {\r\n                (document.getElementById(\"notification_timer\") as HTMLInputElement).innerHTML = \"<span class='warning'>Please enter all the field required</span>\";\r\n            }\r\n            (document.getElementById(\"notification_num\") as HTMLInputElement).innerHTML = \"<span class='warning'>Please enter all the field required</span>\";\r\n        }\r\n\r\n    }\r\n\r\n         /* This function applied when the users click the Halt button\r\n    The program will stop to print out The series of numbers and frequency \r\n    */\r\n    const handleHalt = () => {\r\n        clearInterval(interval);\r\n        (document.getElementById(\"haltBtn\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"startBtn\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"resumeBtn\") as HTMLInputElement).disabled = false;\r\n        (document.getElementById(\"timing\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<p>The system has paused</p>\";\r\n        status=\"halt\";\r\n    }\r\n\r\n         /* This function applied when the users click the Resume button\r\n    The program will start to print out The series of numbers and frequency again \r\n    */\r\n    const handleResume = () => {\r\n        status=\"start\";\r\n        (document.getElementById(\"startBtn\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"haltBtn\") as HTMLInputElement).disabled = false;\r\n        (document.getElementById(\"resumeBtn\") as HTMLInputElement).disabled = true;\r\n        (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<p>The system has resumed</p>\";\r\n        handleInterval();\r\n\r\n    }\r\n\r\n    //()=> setProgram(\"resume\")\r\n/* This function for the feature of Interval\r\nin order to execute a series of actions in a certain amount of time \r\n    */\r\n    const handleInterval = () => {\r\n        freNum = parseInt(sessionStorage.getItem(\"frequency\") || '{}');\r\n        if(freNum !== null)\r\n        {\r\n            interval = setInterval(function() {\r\n                if(status===\"start\")\r\n                {\r\n                    let tempList : string | null= sessionStorage.getItem(\"numberList\");\r\n                    if(tempList!==null)\r\n                    {\r\n                        numArr = JSON.parse(tempList);\r\n                    }\r\n                    let coreNum = removeDuplicates(numArr); \r\n                    let coreNumCount = new Array(coreNum.length).fill(0);\r\n                    for(let i=0;i<coreNum.length;i++) {\r\n                        for(let j=0;j<numArr.length;j++) {\r\n                            if(coreNum[i]===numArr[j])\r\n                                coreNumCount[i]++;\r\n                        }; \r\n                    };\r\n\r\n                    let objNumList: {\r\n                        key: string;\r\n                        value: any;\r\n                    } []= [];\r\n    \r\n                    for (let m = 0; m < coreNum.length; m++) {\r\n                        objNumList.push({\r\n                            'key': coreNum[m],\r\n                            'value': coreNumCount[m]\r\n                        });\r\n                    }\r\n    \r\n                    objNumList.sort(function(a, b) { return b.value - a.value; });\r\n                    (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<p>\";\r\n                    console.log(objNumList);\r\n    \r\n                    let index : number = 0;\r\n\r\n                \r\n                    objNumList.map(obj  => {\r\n                        (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<span>\"+ obj.key+\":\"+obj.value+\" </span>\";                        \r\n                        if(index<objNumList.length-1)\r\n                        {\r\n                            (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"<span>, </span> \"; \r\n                        }\r\n                        index++;\r\n                    });                   \r\n                    (document.getElementById(\"numberandfrequency\") as HTMLInputElement).innerHTML += \"</p>\";\r\n                }              \r\n              }, freNum *1000);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n     /* Components of 4 functional buttons and their according onClick functions triggered by users*/\r\n    return (\r\n        <div className=\"menu\">\r\n        <button className=\"button\" id=\"startBtn\" onClick={handleStart}>Start</button>\r\n        <button className=\"button\"id=\"haltBtn\" onClick={handleHalt}>Halt</button>\r\n        <button  className=\"button\" id=\"resumeBtn\" onClick={handleResume}>Resume</button>\r\n        <button  className=\"button\" id=\"quitBtn\" onClick={handleQuit} >Quit</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\n /* Components for Input and Output parts separated by applying Bootstrap*/\r\nexport default function Nextnumber() {\r\n    return (\r\n        <div className=\"frame\">\r\n            <Container>\r\n                <Row>\r\n                    <Col sm=\"6\" className=\"title\"><span id=\"\">INPUT</span></Col>\r\n                    <Col sm=\"6\" className=\"title\">\r\n                        <span id=\"\">OUTPUT</span>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Col sm=\"6\" ><span id=\"numberentered\">Please enter the field required above</span></Col>\r\n                    <Col sm=\"6\">\r\n                        <span id=\"numberandfrequency\">The system has not started</span>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import Secondtimer from './Secondtimer';\nimport Nextnumber from './Nextnumber';\nimport Menu from './Menu';\nimport Output from './Output';\nimport { Container, Row, Col } from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n\n   /* App is the place for all components intergrated\n 1. Components of entering time (in seconds)\n 2. Components of entering all numbers \n 3. Components of 4 functional buttons\n 4. Components of Input and Output parts required to show off on the screen*/\n  return (\n    <div className=\"content\">\n      <Container>\n        <Row>\n          <Col sm=\"2\" className='navBar'>\n            <Secondtimer />\n            <hr/>\n            <Nextnumber />\n            <hr/>\n            <Menu />\n          </Col>\n          <Col sm=\"10\">\n            <Output />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}